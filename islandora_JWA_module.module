<?php

function islandora_JWA_module_menu() {
  $items = array();

  $items['fedora/repository/create_collection/%'] = array(
    'title' => 'Create Collection',
    'description' => 'Create a new collection.',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('collection_creation_form',3),
    'access arguments' => array('add fedora datastreams'),
  );

  return $items;
}

/**
 * collection creation form ?
 * @param type $form_state
 * @param type $parent_collection_pid
 * @return type 
 */
function collection_creation_form(&$form_state, $parent_collection_pid) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  $restricted = FALSE;
  if (variable_get('fedora_namespace_restriction_enforced', true)) {
    $restricted = true;
    $allowed_string = variable_get('fedora_pids_allowed', 'default: demo: changeme: islandora:');
    $namespaces = explode(':', $allowed_string);
    foreach ($namespaces as $namespace) {
      if ($namespace) {
        $allowed[trim($namespace)] = trim($namespace);
      }
    }
  }

  $content_models = get_content_models_as_option_array();
  $form['titlebox'] = array(
    '#type' => 'item',
    '#value' => t("Create New Child Collection within $parent_collection_pid"),
  );

  $form['collection_name'] = array(
    '#title' => "Collection Name",
    '#type' => 'textfield',
    '#description' => t("Human readable name for this collection"),
  );
  $form['collection_pid'] = array(
    '#title' => "Collection PID",
    '#type' => 'textfield',
    '#size' => 15,
    '#default_value' => 'jwa:',
    '#description' => t("Unique PID for this collection.  <br />Pids take the general form of namespace:collection eg jwa:summerInstitute"),
  );
  //if (!$restricted) {
    $form['collection_namespace'] = array(
      '#type' => 'hidden',
      '#value' => 'jwa:',
    );
  //}
  //else {
  //  $form['collection_namespace'] = array(
  //    '#type' => ''
  //    '#title' => "Collection Namespace",
  //    '#type' => 'select',
  //    '#options' => $allowed,
  //    '#default_value' => 'default',
  //    '#description' => t("Namespace for objects in this collection."),
  //  );
  //}
  $form['parent_collection'] = array(
    '#type' => 'hidden',
    '#value' => $parent_collection_pid,
  );

  $form['content_models'] = array(
    '#title' => "Choose allowable content models for this collection",
    '#type' => 'checkboxes',
    '#options' => $content_models,
    '#required' => true,
    '#description' => t("Content models describe the behaviours of objects with which they are associated."),
  );


  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit')
  );


  return($form);
}

/**
 * collection creation form validate ?
 * @param type $form
 * @param type $form_state
 * @return type 
 */
function collection_creation_form_validate($form, &$form_state) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  $pid = $form_state['values']['collection_pid'];
  $item = new fedora_item($pid);
  if ($item->exists()) {
    form_set_error('', t("$pid already exists within your repository. the PID must be unique"));
    return;
  }
  if (!validPid($pid)){
     form_set_error('', t("$pid is not a valid identifier"));
     return;
  }
}

/**
 * collection creation form submit
 * @global type $user
 * @param type $form
 * @param type $form_state 
 */
function collection_creation_form_submit($form, &$form_state) {
  global $user;
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'fedora_repository', 'api/dublin_core');
  $module_path = drupal_get_path('module', 'fedora_repository');
  $thumbnail = drupal_get_path('module', 'Fedora_Repository') . '/images/Crystal_Clear_filesystem_folder_grey.png';
  $collection_pid = $form_state['values']['collection_pid'];
  $new_collection_label = $form_state['values']['collection_name'];
  $parent_collection = $form_state['values']['parent_collection'];
  $pid_namespace = $form_state['values']['collection_namespace'];
  $all_cModels = get_content_models_as_option_array();
  $collection_policy = '<?xml version="1.0" encoding="UTF-8"?>
<collection_policy xmlns="http://www.islandora.ca" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="" xsi:schemaLocation="http://www.islandora.ca http://syn.lib.umanitoba.ca/collection_policy.xsd">
    <content_models>
    </content_models>
    <search_terms>
    </search_terms>
    <staging_area></staging_area>
    <relationship>isMemberOfCollection</relationship>
</collection_policy>';
  $content_models = $form_state['values']['content_models'];
  $collection_policy_xml = simplexml_load_string($collection_policy);
  foreach ($content_models as $content_model) {
    if ($content_model) {
      $node = $collection_policy_xml->content_models->addChild('content_model');
      $node->addAttribute('dsid', 'ISLANDORACM');
      $node->addAttribute('name', $all_cModels[$content_model]);
      $node->addAttribute('namespace', $pid_namespace . ':1');
      $node->addAttribute('pid', $content_model);
    }
  }
  $item = fedora_item::ingest_new_item($collection_pid, 'A', $new_collection_label, $user->name);
  $item->add_relationship('isMemberOfCollection', $parent_collection, RELS_EXT_URI);
  $item->add_relationship('hasModel', 'jwa:collectionCModel', FEDORA_MODEL_URI);
  $item->add_datastream_from_string($collection_policy_xml->saveXML(), 'COLLECTION_POLICY');
  $item->add_datastream_from_file($thumbnail, 'TN');
  drupal_goto("/fedora/repository/$collection_pid");
}

/**
 * Function: get_content_models_as_option_array
 *
 * Description: Returns an associative array of all collection objects in Fedora instance
 *
 * @return array
 */
function get_content_models_as_option_array() {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
//  $restricted = variable_get('fedora_namespace_restriction_enforced', true);
  $restricted = TRUE;
  $allowed_string = 'jwa: JWA:';
  $namespaces = explode(':', $allowed_string);
  foreach ($namespaces as $namespace) {
    if ($namespace) {
      $allowed[] = trim($namespace);
    }
  }
  $query = 'select $object $title from <#ri>
          where ($object <dc:title> $title
          and ($object <fedora-model:hasModel> <info:fedora/fedora-system:ContentModel-3.0>
          or $object <fedora-rels-ext:isMemberOfCollection> <info:fedora/islandora:ContentModelsCollection>)
          and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>)
          order by $title';

  $url = variable_get('fedora_repository_url', 'http://localhost:8080/fedora/risearch');
  $url .= "?type=tuples&flush=true&format=csv&limit=1000&lang=itql&stream=on&query=";
  $content = do_curl($url . htmlentities(urlencode($query)));
  $list = explode("\n", $content);
  array_shift($list);
  $list = preg_replace('/info:fedora\//', '', $list);
  foreach ($list as $item) {   //removes  blanks
    if ($item) {
      $parts = explode(',', $item);
      $item = new fedora_item($parts[0]);
      $nameparts = explode(':', $parts[0]);
      if (!$restricted || in_array($nameparts[0], $allowed))
        if ($item->get_datastream_dissemination('ISLANDORACM')) {
          $options[$parts[0]] = $parts[1];
        }
    }
  }

  return $options;
}
